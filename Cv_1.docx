
###############################################
Čítače
###############################################

---------------------------------------------------
== 1. CTU – Čítač nahoru ==
---------------------------------------------------
Popis:
- Inkrementuje aktuální hodnotu (CV) při náběžné hraně vstupu CU.
- Vstupy:
    - CU: Signál, který při náběžné hraně zvýší čítač o 1.
    - R : Reset, který nastaví čítač na 0.
- Parametry:
    - PV: Přednastavená hodnota, při dosažení které se nastaví indikátor Q na TRUE.
- Výstupy:
    - CV: Aktuální hodnota čítače.
    - Q : Indikátor, zda byl dosažen nebo překročen přednastavený limit (PV).

Příklad kódu:

PROGRAM PLC_Program
VAR
    Trigger : BOOL;    // Signál pro inkrementaci
    Reset   : BOOL;    // Signál pro reset
    Count   : INT;     // Proměnná pro uchování aktuální hodnoty
    MyCTU   : CTU;     // Instance funkčního bloku CTU
END_VAR

// Volání funkčního bloku CTU
MyCTU(
    CU := Trigger,    // Vstup pro inkrementaci
    R  := Reset,      // Reset
    PV := 10          // Přednastavená hodnota (např. 10)
);

// Uložení aktuální hodnoty čítače do proměnné
Count := MyCTU.CV;

// Kontrola, zda čítač dosáhl přednastavené hodnoty
IF MyCTU.Q THEN
    // Čítač dosáhl hodnoty 10, provést potřebnou akci
END_IF

---------------------------------------------------
== 2. CTD – Čítač dolů ==
---------------------------------------------------

Popis:
- Dekrementuje aktuální hodnotu (CV) při náběžné hraně vstupu CD.
- Vstupy:
    - CD: Signál, který při náběžné hraně sníží čítač o 1.
    - R : Reset, který nastaví čítač zpět na přednastavenou hodnotu (PV).
- Parametry:
    - PV: Přednastavená (výchozí) hodnota, od které se odpočítává.
- Výstupy:
    - CV: Aktuální hodnota čítače.
    - Q : Indikátor, zda čítač dosáhl dolní meze (např. 0).

Příklad kódu:

PROGRAM PLC_Program
VAR
    Trigger : BOOL;    // Signál pro dekrementaci
    Reset   : BOOL;    // Signál pro reset
    Count   : INT;     // Proměnná pro uchování aktuální hodnoty
    MyCTD   : CTD;     // Instance funkčního bloku CTD
END_VAR

// Volání funkčního bloku CTD
MyCTD(
    CD := Trigger,    // Dekrementační vstup
    R  := Reset,      // Resetovací vstup
    PV := 10          // Výchozí hodnota (např. 10)
);

Count := MyCTD.CV;

// Kontrola, zda čítač dosáhl dolní meze (např. 0)
IF MyCTD.Q THEN
    // Čítač dosáhl dolní meze, provést potřebnou akci
END_IF

---------------------------------------------------
== 3. CTUD – Kombinovaný čítač nahoru a dolů ==
---------------------------------------------------

Popis:
- Kombinuje funkce CTU a CTD, umožňuje inkrementaci i dekrementaci.
- Vstupy:
    - CU: Signál pro inkrementaci.
    - CD: Signál pro dekrementaci.
    - R : Reset, který nastaví čítač na přednastavenou hodnotu (PV).
- Parametry:
    - PV: Přednastavená hodnota, která může sloužit jako horní nebo dolní mez.
- Výstupy:
    - CV: Aktuální hodnota čítače.
    - Q : Indikátor dosažení nastaveného limitu.

Příklad kódu:

PROGRAM PLC_Program
VAR
    IncTrigger : BOOL;  // Signál pro inkrementaci
    DecTrigger : BOOL;  // Signál pro dekrementaci
    Reset      : BOOL;  // Signál pro reset
    Count      : INT;   // Proměnná pro uchování aktuální hodnoty
    MyCTUD     : CTUD;  // Instance funkčního bloku CTUD
END_VAR

// Volání funkčního bloku CTUD
MyCTUD(
    CU := IncTrigger, // Vstup pro zvýšení hodnoty
    CD := DecTrigger, // Vstup pro snížení hodnoty
    R  := Reset,      // Reset
    PV := 10          // Přednastavená hodnota (např. 10)
);

Count := MyCTUD.CV;

// Podmínka – např. kontrola dosažení horního nebo dolního limitu
IF MyCTUD.Q THEN
    // Provést potřebnou akci při dosažení limitu
END_IF
###############################################
Podmínky
###############################################

---------------------------------------------------
== 1. IF ... THEN ... ELSEIF ... ELSE ... END_IF ==
---------------------------------------------------

Popis:
  Podmínková struktura, která umožňuje vykonat různé bloky kódu na základě splnění dané podmínky.
  Nejprve se vyhodnotí výraz za klíčovým slovem IF. Pokud je podmínka TRUE, vykoná se daný blok.
  Volitelně lze přidat bloky ELSIF pro další podmínky a nakonec ELSE, pokud žádná z podmínek není splněna.

Syntaxe:
  IF podmínka THEN
      // Kód, který se vykoná, pokud je podmínka TRUE
  ELSIF jiná_podmínka THEN
      // Kód, který se vykoná, pokud první podmínka není splněna, ale tato ano
  ELSE
      // Kód, který se vykoná, pokud žádná z podmínek není TRUE
  END_IF;

Příklad:
  IF teplota > 100 THEN
      alarm := TRUE;        // Aktivace alarmu při teplotě nad 100 stupňů
  ELSIF teplota > 80 THEN
      ventilator := TRUE;   // Zapnutí ventilátoru při teplotě nad 80 stupňů
  ELSE
      alarm := FALSE;
      ventilator := FALSE;
  END_IF;

---------------------------------------------------
== 2. CASE ... OF ... ELSE ... END_CASE ==
---------------------------------------------------

Popis:
  Struktura CASE slouží k výběru jedné z více větví na základě hodnoty výrazu.
  Je obdobou konstrukce "switch" v jiných programovacích jazycích.

Syntaxe:
  CASE výraz OF
      hodnota1:
          // Kód pro případ, kdy výraz se rovná hodnota1
      hodnota2:
          // Kód pro případ, kdy výraz se rovná hodnota2
      ELSE
          // Kód, pokud žádná z hodnot nesedí
  END_CASE;

Příklad:
  CASE stavMotoru OF
      0:
          text := 'Motor je vypnutý';
      1:
          text := 'Motor běží';
      2:
          text := 'Motor v chybovém stavu';
      ELSE
          text := 'Neznámý stav';
  END_CASE;

---------------------------------------------------
== 3. WHILE ... DO ... END_WHILE ==
---------------------------------------------------

Popis:
  Cyklická struktura, která vykonává blok kódu, dokud je splněna zadaná podmínka.
  Podmínka se vyhodnocuje před každou iterací cyklu.

Syntaxe:
  WHILE podmínka DO
      // Kód, který se opakuje
  END_WHILE;

Příklad:
  i := 0;
  WHILE i < 10 DO
      soucet := soucet + i;
      i := i + 1;
  END_WHILE;

---------------------------------------------------
== 4. REPEAT ... UNTIL ... END_REPEAT ==
---------------------------------------------------

Popis:
  Cyklická struktura podobná WHILE, avšak podmínka se kontroluje až po vykonání bloku kódu.
  Díky tomu se kód vykoná alespoň jednou před tím, než se podmínka ověří.

Syntaxe:
  REPEAT
      // Kód, který se vykoná minimálně jednou
  UNTIL podmínka
  END_REPEAT;

Příklad:
  i := 0;
  REPEAT
      soucet := soucet + i;
      i := i + 1;
  UNTIL i >= 10
  END_REPEAT;

---------------------------------------------------
== 5. FOR ... TO ... DO ... END_FOR ==
---------------------------------------------------

Popis:
  Řídicí struktura pro opakování bloku kódu pevně stanovený počet krát.
  Proměnná cyklu se automaticky inkrementuje při každé iteraci.

Syntaxe:
  FOR i := počáteční_hodnota TO koncová_hodnota DO
      // Kód, který se vykoná pro každou hodnotu i
  END_FOR;

Příklad:
  FOR i := 1 TO 10 DO
      soucet := soucet + i;
  END_FOR;

---------------------------------------------------
Shrnutí:
  V PLC programování ve Structured Textu se nejčastěji využívají následující struktury:
  - IF ... THEN ... ELSEIF ... ELSE ... END_IF pro podmíněné větvení.
  - CASE ... OF ... ELSE ... END_CASE pro volbu větve na základě hodnoty výrazu.
  - WHILE ... DO ... END_WHILE pro cykly s kontrolou podmínky před vstupem.
  - REPEAT ... UNTIL ... END_REPEAT pro cykly, které se vykonají alespoň jednou.
  - FOR ... TO ... DO ... END_FOR pro pevně daný počet iterací.

###############################################
Přehled základních datových typů a přetypování v PLC
###############################################

---------------------------------------------------
== 1. Základní datové typy ==
---------------------------------------------------

- BOOL:
    - Logická hodnota, která může nabývat hodnot TRUE nebo FALSE.
    - Použití: reprezentace binárních stavů (zapnuto/vypnuto, otevřeno/zavřeno).

- BYTE, WORD, DWORD:
    - Číselné typy s pevnou šířkou:
        • BYTE: 8 bitů
        • WORD: 16 bitů
        • DWORD: 32 bitů
    - Použití: bitové operace, registry, manipulace s bity.

- INT, DINT, LINT:
    - Celá čísla se znaménkem:
        • INT: 16-bitové (rozsah: -32768 až 32767)
        • DINT: 32-bitové (rozsah: -2 147 483 648 až 2 147 483 647)
        • LINT: 64-bitové
    - Použití: běžné aritmetické operace a indexování.

- UINT, UDINT, ULINT:
    - Celá čísla bez znaménka:
        • UINT: 16-bitové
        • UDINT: 32-bitové
        • ULINT: 64-bitové
    - Použití: když nepotřebujete záporné hodnoty.

- REAL, LREAL:
    - Čísla s plovoucí desetinnou čárkou:
        • REAL: 32-bitové reálné číslo
        • LREAL: 64-bitové reálné číslo (vyšší přesnost)
    - Použití: matematické výpočty, kde je třeba pracovat s desetinnými hodnotami.

- STRING:
    - Řetězcový datový typ pro textová data.
    - Délka může být pevně stanovena (např. STRING[80]) nebo dynamická, v závislosti na platformě.

- TIME:
    - Datový typ pro vyjádření časového intervalu.
    - Použití: časovače, zpoždění, měření času.

- DATE, TIME_OF_DAY, DATE_AND_TIME:
    - Typy pro práci s datem a časem:
        • DATE: reprezentace pouze data
        • TIME_OF_DAY: reprezentace času v rámci jednoho dne
        • DATE_AND_TIME: kombinace data a času

---------------------------------------------------
== 2. Složené datové typy ==
---------------------------------------------------

- STRUCT (STRUCTURE):
    - Umožňuje definovat složený datový typ sestávající z více prvků různých datových typů.
    - Použití: seskupení souvisejících proměnných do jednoho logického celku.

- ARRAY:
    - Pole proměnných stejného datového typu.
    - Použití: uchovávání kolekce hodnot (např. měření ze senzorů).

- ENUM (Enumerated Type):
    - Výčtový datový typ s předdefinovaným seznamem hodnot.
    - Použití: zvýšení přehlednosti a omezení možných hodnot (např. stav zařízení: VYPNUTO, SPUŠTĚNO, CHYBA).

---------------------------------------------------
== 3. Přetypování datových typů ==
---------------------------------------------------

V PLC programování je často nutné převádět hodnoty mezi různými datovými typy. Přetypování se provádí buď pomocí explicitního převodu, nebo využitím konverzních funkcí.

### Explicitní přetypování:
- V Structured Textu lze přetypovat hodnotu pomocí zápisu s cílovým typem.
- Syntaxe:
  cílováProměnná := CÍLOVÝ_TYP(výchozíProměnná);

- Příklad:
  VAR
      intValue  : INT := 25;
      realValue : REAL;
  END_VAR

  // Přetypování INT na REAL
  realValue := REAL(intValue);

### Konverzní funkce:
- Pro převod mezi datovými typy se často využívají standardní funkce, například:
    - INT_TO_REAL(myInt)    : Převod z INT na REAL.
    - REAL_TO_INT(myReal)    : Převod z REAL na INT.
    - BOOL_TO_INT(myBool)    : Převod logické hodnoty na INT (FALSE = 0, TRUE = 1).
    - STRING_TO_INT(myString): Převod řetězce obsahující číselnou hodnotu na INT.

- Příklad:
  PROGRAM TypeConversionExample
  VAR
      myInt    : INT := 10;
      myReal   : REAL;
      myBool   : BOOL := TRUE;
      myString : STRING(10) := '123';
      resultInt: INT;
  END_VAR

  // Přetypování INT na REAL pomocí explicitního přetypování
  myReal := REAL(myInt);

  // Přetypování pomocí konverzní funkce
  resultInt := STRING_TO_INT(myString);

https://docs.google.com/document/d/157KDufcgIBTDMe5xA43Q7Se_G7uvs45T5tf5b9kX4es/edit?tab=t.0
